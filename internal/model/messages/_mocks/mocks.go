// Code generated by MockGen. DO NOT EDIT.
// Source: internal/model/messages/model.go

// Package mock_messages is a generated GoMock package.
package mock_messages

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	purchases "gitlab.ozon.dev/apetrichuk/financial-tg-bot/internal/model/purchases"
)

// MockMessageSender is a mock of MessageSender interface.
type MockMessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockMessageSenderMockRecorder
}

// MockMessageSenderMockRecorder is the mock recorder for MockMessageSender.
type MockMessageSenderMockRecorder struct {
	mock *MockMessageSender
}

// NewMockMessageSender creates a new mock instance.
func NewMockMessageSender(ctrl *gomock.Controller) *MockMessageSender {
	mock := &MockMessageSender{ctrl: ctrl}
	mock.recorder = &MockMessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageSender) EXPECT() *MockMessageSenderMockRecorder {
	return m.recorder
}

// SendImage mocks base method.
func (m *MockMessageSender) SendImage(img []byte, chatID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendImage", img, chatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendImage indicates an expected call of SendImage.
func (mr *MockMessageSenderMockRecorder) SendImage(img, chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendImage", reflect.TypeOf((*MockMessageSender)(nil).SendImage), img, chatID)
}

// SendKeyboard mocks base method.
func (m *MockMessageSender) SendKeyboard(text string, userID int64, buttonTexts []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendKeyboard", text, userID, buttonTexts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendKeyboard indicates an expected call of SendKeyboard.
func (mr *MockMessageSenderMockRecorder) SendKeyboard(text, userID, buttonTexts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendKeyboard", reflect.TypeOf((*MockMessageSender)(nil).SendKeyboard), text, userID, buttonTexts)
}

// SendMessage mocks base method.
func (m *MockMessageSender) SendMessage(text string, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", text, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockMessageSenderMockRecorder) SendMessage(text, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMessageSender)(nil).SendMessage), text, userID)
}

// MockPurchasesModel is a mock of PurchasesModel interface.
type MockPurchasesModel struct {
	ctrl     *gomock.Controller
	recorder *MockPurchasesModelMockRecorder
}

// MockPurchasesModelMockRecorder is the mock recorder for MockPurchasesModel.
type MockPurchasesModelMockRecorder struct {
	mock *MockPurchasesModel
}

// NewMockPurchasesModel creates a new mock instance.
func NewMockPurchasesModel(ctrl *gomock.Controller) *MockPurchasesModel {
	mock := &MockPurchasesModel{ctrl: ctrl}
	mock.recorder = &MockPurchasesModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPurchasesModel) EXPECT() *MockPurchasesModelMockRecorder {
	return m.recorder
}

// AddCategory mocks base method.
func (m *MockPurchasesModel) AddCategory(ctx context.Context, category string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCategory", ctx, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCategory indicates an expected call of AddCategory.
func (mr *MockPurchasesModelMockRecorder) AddCategory(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCategory", reflect.TypeOf((*MockPurchasesModel)(nil).AddCategory), ctx, category)
}

// AddCategoryToUser mocks base method.
func (m *MockPurchasesModel) AddCategoryToUser(ctx context.Context, userID int64, category string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCategoryToUser", ctx, userID, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCategoryToUser indicates an expected call of AddCategoryToUser.
func (mr *MockPurchasesModelMockRecorder) AddCategoryToUser(ctx, userID, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCategoryToUser", reflect.TypeOf((*MockPurchasesModel)(nil).AddCategoryToUser), ctx, userID, category)
}

// AddPurchase mocks base method.
func (m *MockPurchasesModel) AddPurchase(ctx context.Context, userID int64, rawSum, category, rawDate string) (purchases.ExpensesAndLimit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPurchase", ctx, userID, rawSum, category, rawDate)
	ret0, _ := ret[0].(purchases.ExpensesAndLimit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPurchase indicates an expected call of AddPurchase.
func (mr *MockPurchasesModelMockRecorder) AddPurchase(ctx, userID, rawSum, category, rawDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPurchase", reflect.TypeOf((*MockPurchasesModel)(nil).AddPurchase), ctx, userID, rawSum, category, rawDate)
}

// ChangeUserCurrency mocks base method.
func (m *MockPurchasesModel) ChangeUserCurrency(ctx context.Context, userID int64, currency purchases.Currency) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserCurrency", ctx, userID, currency)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserCurrency indicates an expected call of ChangeUserCurrency.
func (mr *MockPurchasesModelMockRecorder) ChangeUserCurrency(ctx, userID, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserCurrency", reflect.TypeOf((*MockPurchasesModel)(nil).ChangeUserCurrency), ctx, userID, currency)
}

// ChangeUserLimit mocks base method.
func (m *MockPurchasesModel) ChangeUserLimit(ctx context.Context, userID int64, rawLimit string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserLimit", ctx, userID, rawLimit)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserLimit indicates an expected call of ChangeUserLimit.
func (mr *MockPurchasesModelMockRecorder) ChangeUserLimit(ctx, userID, rawLimit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserLimit", reflect.TypeOf((*MockPurchasesModel)(nil).ChangeUserLimit), ctx, userID, rawLimit)
}

// CurrencyToStr mocks base method.
func (m *MockPurchasesModel) CurrencyToStr(cy purchases.Currency) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrencyToStr", cy)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrencyToStr indicates an expected call of CurrencyToStr.
func (mr *MockPurchasesModelMockRecorder) CurrencyToStr(cy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrencyToStr", reflect.TypeOf((*MockPurchasesModel)(nil).CurrencyToStr), cy)
}

// GetAllCategories mocks base method.
func (m *MockPurchasesModel) GetAllCategories(ctx context.Context) ([]purchases.CategoryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCategories", ctx)
	ret0, _ := ret[0].([]purchases.CategoryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCategories indicates an expected call of GetAllCategories.
func (mr *MockPurchasesModelMockRecorder) GetAllCategories(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCategories", reflect.TypeOf((*MockPurchasesModel)(nil).GetAllCategories), ctx)
}

// GetUserCategories mocks base method.
func (m *MockPurchasesModel) GetUserCategories(ctx context.Context, userID int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCategories", ctx, userID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCategories indicates an expected call of GetUserCategories.
func (mr *MockPurchasesModelMockRecorder) GetUserCategories(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCategories", reflect.TypeOf((*MockPurchasesModel)(nil).GetUserCategories), ctx, userID)
}

// Report mocks base method.
func (m *MockPurchasesModel) Report(ctx context.Context, period purchases.Period, userID int64) (string, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Report", ctx, period, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Report indicates an expected call of Report.
func (mr *MockPurchasesModelMockRecorder) Report(ctx, period, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Report", reflect.TypeOf((*MockPurchasesModel)(nil).Report), ctx, period, userID)
}

// StrToCurrency mocks base method.
func (m *MockPurchasesModel) StrToCurrency(str string) (purchases.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StrToCurrency", str)
	ret0, _ := ret[0].(purchases.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StrToCurrency indicates an expected call of StrToCurrency.
func (mr *MockPurchasesModelMockRecorder) StrToCurrency(str interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StrToCurrency", reflect.TypeOf((*MockPurchasesModel)(nil).StrToCurrency), str)
}

// ToPeriod mocks base method.
func (m *MockPurchasesModel) ToPeriod(str string) (purchases.Period, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToPeriod", str)
	ret0, _ := ret[0].(purchases.Period)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToPeriod indicates an expected call of ToPeriod.
func (mr *MockPurchasesModelMockRecorder) ToPeriod(str interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToPeriod", reflect.TypeOf((*MockPurchasesModel)(nil).ToPeriod), str)
}

// MockStatusStore is a mock of StatusStore interface.
type MockStatusStore struct {
	ctrl     *gomock.Controller
	recorder *MockStatusStoreMockRecorder
}

// MockStatusStoreMockRecorder is the mock recorder for MockStatusStore.
type MockStatusStoreMockRecorder struct {
	mock *MockStatusStore
}

// NewMockStatusStore creates a new mock instance.
func NewMockStatusStore(ctrl *gomock.Controller) *MockStatusStore {
	mock := &MockStatusStore{ctrl: ctrl}
	mock.recorder = &MockStatusStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusStore) EXPECT() *MockStatusStoreMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockStatusStore) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStatusStoreMockRecorder) Delete(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStatusStore)(nil).Delete), ctx, key)
}

// GetString mocks base method.
func (m *MockStatusStore) GetString(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetString", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStatusStoreMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MockStatusStore)(nil).GetString), ctx, key)
}

// SetString mocks base method.
func (m *MockStatusStore) SetString(ctx context.Context, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetString", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockStatusStoreMockRecorder) Set(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetString", reflect.TypeOf((*MockStatusStore)(nil).SetString), ctx, key, value)
}
