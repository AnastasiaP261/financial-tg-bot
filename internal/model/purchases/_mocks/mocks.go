// Code generated by MockGen. DO NOT EDIT.
// Source: internal/model/purchases/model.go

// Package mock_purchases is a generated GoMock package.
package mock_purchases

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	currency "gitlab.ozon.dev/apetrichuk/financial-tg-bot/internal/model/currency"
	purchases "gitlab.ozon.dev/apetrichuk/financial-tg-bot/internal/model/purchases"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// AddCategory mocks base method.
func (m *MockRepo) AddCategory(ctx context.Context, categoryName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCategory", ctx, categoryName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCategory indicates an expected call of AddCategory.
func (mr *MockRepoMockRecorder) AddCategory(ctx, categoryName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCategory", reflect.TypeOf((*MockRepo)(nil).AddCategory), ctx, categoryName)
}

// AddCategoryToUser mocks base method.
func (m *MockRepo) AddCategoryToUser(ctx context.Context, userID int64, catName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCategoryToUser", ctx, userID, catName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCategoryToUser indicates an expected call of AddCategoryToUser.
func (mr *MockRepoMockRecorder) AddCategoryToUser(ctx, userID, catName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCategoryToUser", reflect.TypeOf((*MockRepo)(nil).AddCategoryToUser), ctx, userID, catName)
}

// AddPurchase mocks base method.
func (m *MockRepo) AddPurchase(ctx context.Context, req purchases.AddPurchaseReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPurchase", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPurchase indicates an expected call of AddPurchase.
func (mr *MockRepoMockRecorder) AddPurchase(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPurchase", reflect.TypeOf((*MockRepo)(nil).AddPurchase), ctx, req)
}

// AddRate mocks base method.
func (m_2 *MockRepo) AddRate(ctx context.Context, y, m, d int, rates currency.RateToRUB) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "AddRate", ctx, y, m, d, rates)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRate indicates an expected call of AddRate.
func (mr *MockRepoMockRecorder) AddRate(ctx, y, m, d, rates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRate", reflect.TypeOf((*MockRepo)(nil).AddRate), ctx, y, m, d, rates)
}

// ChangeCurrency mocks base method.
func (m *MockRepo) ChangeCurrency(ctx context.Context, userID int64, currency currency.Currency) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeCurrency", ctx, userID, currency)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeCurrency indicates an expected call of ChangeCurrency.
func (mr *MockRepoMockRecorder) ChangeCurrency(ctx, userID, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeCurrency", reflect.TypeOf((*MockRepo)(nil).ChangeCurrency), ctx, userID, currency)
}

// ChangeUserLimit mocks base method.
func (m *MockRepo) ChangeUserLimit(ctx context.Context, userID int64, newLimit float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserLimit", ctx, userID, newLimit)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserLimit indicates an expected call of ChangeUserLimit.
func (mr *MockRepoMockRecorder) ChangeUserLimit(ctx, userID, newLimit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserLimit", reflect.TypeOf((*MockRepo)(nil).ChangeUserLimit), ctx, userID, newLimit)
}

// GetAllCategories mocks base method.
func (m *MockRepo) GetAllCategories(ctx context.Context) ([]purchases.CategoryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCategories", ctx)
	ret0, _ := ret[0].([]purchases.CategoryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCategories indicates an expected call of GetAllCategories.
func (mr *MockRepoMockRecorder) GetAllCategories(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCategories", reflect.TypeOf((*MockRepo)(nil).GetAllCategories), ctx)
}

// GetCategoryID mocks base method.
func (m *MockRepo) GetCategoryID(ctx context.Context, categoryName string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryID", ctx, categoryName)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryID indicates an expected call of GetCategoryID.
func (mr *MockRepoMockRecorder) GetCategoryID(ctx, categoryName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryID", reflect.TypeOf((*MockRepo)(nil).GetCategoryID), ctx, categoryName)
}

// GetRate mocks base method.
func (m_2 *MockRepo) GetRate(ctx context.Context, y, m, d int) (bool, currency.RateToRUB, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "GetRate", ctx, y, m, d)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(currency.RateToRUB)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRate indicates an expected call of GetRate.
func (mr *MockRepoMockRecorder) GetRate(ctx, y, m, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRate", reflect.TypeOf((*MockRepo)(nil).GetRate), ctx, y, m, d)
}

// GetUserCategories mocks base method.
func (m *MockRepo) GetUserCategories(ctx context.Context, userID int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCategories", ctx, userID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCategories indicates an expected call of GetUserCategories.
func (mr *MockRepoMockRecorder) GetUserCategories(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCategories", reflect.TypeOf((*MockRepo)(nil).GetUserCategories), ctx, userID)
}

// GetUserInfo mocks base method.
func (m *MockRepo) GetUserInfo(ctx context.Context, userID int64) (purchases.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, userID)
	ret0, _ := ret[0].(purchases.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockRepoMockRecorder) GetUserInfo(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockRepo)(nil).GetUserInfo), ctx, userID)
}

// GetUserPurchasesFromDate mocks base method.
func (m *MockRepo) GetUserPurchasesFromDate(ctx context.Context, fromDate time.Time, userID int64) ([]purchases.Purchase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPurchasesFromDate", ctx, fromDate, userID)
	ret0, _ := ret[0].([]purchases.Purchase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPurchasesFromDate indicates an expected call of GetUserPurchasesFromDate.
func (mr *MockRepoMockRecorder) GetUserPurchasesFromDate(ctx, fromDate, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPurchasesFromDate", reflect.TypeOf((*MockRepo)(nil).GetUserPurchasesFromDate), ctx, fromDate, userID)
}

// GetUserPurchasesSumFromMonth mocks base method.
func (m *MockRepo) GetUserPurchasesSumFromMonth(ctx context.Context, userID int64, fromDate time.Time) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPurchasesSumFromMonth", ctx, userID, fromDate)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPurchasesSumFromMonth indicates an expected call of GetUserPurchasesSumFromMonth.
func (mr *MockRepoMockRecorder) GetUserPurchasesSumFromMonth(ctx, userID, fromDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPurchasesSumFromMonth", reflect.TypeOf((*MockRepo)(nil).GetUserPurchasesSumFromMonth), ctx, userID, fromDate)
}

// UserCreateIfNotExist mocks base method.
func (m *MockRepo) UserCreateIfNotExist(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCreateIfNotExist", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserCreateIfNotExist indicates an expected call of UserCreateIfNotExist.
func (mr *MockRepoMockRecorder) UserCreateIfNotExist(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreateIfNotExist", reflect.TypeOf((*MockRepo)(nil).UserCreateIfNotExist), ctx, userID)
}

// UserHasCategory mocks base method.
func (m *MockRepo) UserHasCategory(ctx context.Context, userID int64, categoryID uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserHasCategory", ctx, userID, categoryID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserHasCategory indicates an expected call of UserHasCategory.
func (mr *MockRepoMockRecorder) UserHasCategory(ctx, userID, categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserHasCategory", reflect.TypeOf((*MockRepo)(nil).UserHasCategory), ctx, userID, categoryID)
}

// MockExchangeRateGetter is a mock of ExchangeRateGetter interface.
type MockExchangeRateGetter struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeRateGetterMockRecorder
}

// MockExchangeRateGetterMockRecorder is the mock recorder for MockExchangeRateGetter.
type MockExchangeRateGetterMockRecorder struct {
	mock *MockExchangeRateGetter
}

// NewMockExchangeRateGetter creates a new mock instance.
func NewMockExchangeRateGetter(ctrl *gomock.Controller) *MockExchangeRateGetter {
	mock := &MockExchangeRateGetter{ctrl: ctrl}
	mock.recorder = &MockExchangeRateGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeRateGetter) EXPECT() *MockExchangeRateGetterMockRecorder {
	return m.recorder
}

// GetExchangeRateToRUB mocks base method.
func (m *MockExchangeRateGetter) GetExchangeRateToRUB() currency.RateToRUB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeRateToRUB")
	ret0, _ := ret[0].(currency.RateToRUB)
	return ret0
}

// GetExchangeRateToRUB indicates an expected call of GetExchangeRateToRUB.
func (mr *MockExchangeRateGetterMockRecorder) GetExchangeRateToRUB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRateToRUB", reflect.TypeOf((*MockExchangeRateGetter)(nil).GetExchangeRateToRUB))
}

// GetExchangeRateToRUBFromDate mocks base method.
func (m_2 *MockExchangeRateGetter) GetExchangeRateToRUBFromDate(ctx context.Context, y, m, d int) (currency.RateToRUB, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "GetExchangeRateToRUBFromDate", ctx, y, m, d)
	ret0, _ := ret[0].(currency.RateToRUB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeRateToRUBFromDate indicates an expected call of GetExchangeRateToRUBFromDate.
func (mr *MockExchangeRateGetterMockRecorder) GetExchangeRateToRUBFromDate(ctx, y, m, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRateToRUBFromDate", reflect.TypeOf((*MockExchangeRateGetter)(nil).GetExchangeRateToRUBFromDate), ctx, y, m, d)
}

// MockReportsStore is a mock of ReportsStore interface.
type MockReportsStore struct {
	ctrl     *gomock.Controller
	recorder *MockReportsStoreMockRecorder
}

// MockReportsStoreMockRecorder is the mock recorder for MockReportsStore.
type MockReportsStoreMockRecorder struct {
	mock *MockReportsStore
}

// NewMockReportsStore creates a new mock instance.
func NewMockReportsStore(ctrl *gomock.Controller) *MockReportsStore {
	mock := &MockReportsStore{ctrl: ctrl}
	mock.recorder = &MockReportsStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReportsStore) EXPECT() *MockReportsStoreMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockReportsStore) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockReportsStoreMockRecorder) Delete(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockReportsStore)(nil).Delete), ctx, key)
}

// MockBrokerMsgCreator is a mock of BrokerMsgCreator interface.
type MockBrokerMsgCreator struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerMsgCreatorMockRecorder
}

// MockBrokerMsgCreatorMockRecorder is the mock recorder for MockBrokerMsgCreator.
type MockBrokerMsgCreatorMockRecorder struct {
	mock *MockBrokerMsgCreator
}

// NewMockBrokerMsgCreator creates a new mock instance.
func NewMockBrokerMsgCreator(ctrl *gomock.Controller) *MockBrokerMsgCreator {
	mock := &MockBrokerMsgCreator{ctrl: ctrl}
	mock.recorder = &MockBrokerMsgCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrokerMsgCreator) EXPECT() *MockBrokerMsgCreatorMockRecorder {
	return m.recorder
}

// SendNewMsg mocks base method.
func (m *MockBrokerMsgCreator) SendNewMsg(key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNewMsg", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendNewMsg indicates an expected call of SendNewMsg.
func (mr *MockBrokerMsgCreatorMockRecorder) SendNewMsg(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNewMsg", reflect.TypeOf((*MockBrokerMsgCreator)(nil).SendNewMsg), key, value)
}
