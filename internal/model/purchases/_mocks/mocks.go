// Code generated by MockGen. DO NOT EDIT.
// Source: internal/model/purchases/model.go

// Package mock_purchases is a generated GoMock package.
package mock_purchases

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	purchases "gitlab.ozon.dev/apetrichuk/financial-tg-bot/internal/model/purchases"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// AddCategory mocks base method.
func (m *MockRepo) AddCategory(ctx context.Context, req purchases.CategoryRow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCategory", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCategory indicates an expected call of AddCategory.
func (mr *MockRepoMockRecorder) AddCategory(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCategory", reflect.TypeOf((*MockRepo)(nil).AddCategory), ctx, req)
}

// AddPurchase mocks base method.
func (m *MockRepo) AddPurchase(ctx context.Context, req purchases.AddPurchaseReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPurchase", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPurchase indicates an expected call of AddPurchase.
func (mr *MockRepoMockRecorder) AddPurchase(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPurchase", reflect.TypeOf((*MockRepo)(nil).AddPurchase), ctx, req)
}

// AddRate mocks base method.
func (m_2 *MockRepo) AddRate(ctx context.Context, y, m, d int, rates purchases.RateToRUB) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "AddRate", ctx, y, m, d, rates)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRate indicates an expected call of AddRate.
func (mr *MockRepoMockRecorder) AddRate(ctx, y, m, d, rates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRate", reflect.TypeOf((*MockRepo)(nil).AddRate), ctx, y, m, d, rates)
}

// ChangeCurrency mocks base method.
func (m *MockRepo) ChangeCurrency(ctx context.Context, userID int64, currency purchases.Currency) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeCurrency", ctx, userID, currency)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeCurrency indicates an expected call of ChangeCurrency.
func (mr *MockRepoMockRecorder) ChangeCurrency(ctx, userID, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeCurrency", reflect.TypeOf((*MockRepo)(nil).ChangeCurrency), ctx, userID, currency)
}

// GetCategoryID mocks base method.
func (m *MockRepo) GetCategoryID(ctx context.Context, req purchases.CategoryRow) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryID", ctx, req)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryID indicates an expected call of GetCategoryID.
func (mr *MockRepoMockRecorder) GetCategoryID(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryID", reflect.TypeOf((*MockRepo)(nil).GetCategoryID), ctx, req)
}

// GetRate mocks base method.
func (m_2 *MockRepo) GetRate(ctx context.Context, y, m, d int) (bool, purchases.RateToRUB, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "GetRate", ctx, y, m, d)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(purchases.RateToRUB)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRate indicates an expected call of GetRate.
func (mr *MockRepoMockRecorder) GetRate(ctx, y, m, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRate", reflect.TypeOf((*MockRepo)(nil).GetRate), ctx, y, m, d)
}

// GetUserInfo mocks base method.
func (m *MockRepo) GetUserInfo(ctx context.Context, userID int64) (purchases.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, userID)
	ret0, _ := ret[0].(purchases.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockRepoMockRecorder) GetUserInfo(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockRepo)(nil).GetUserInfo), ctx, userID)
}

// GetUserPurchasesFromDate mocks base method.
func (m *MockRepo) GetUserPurchasesFromDate(ctx context.Context, fromDate time.Time, userID int64) ([]purchases.Purchase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPurchasesFromDate", ctx, fromDate, userID)
	ret0, _ := ret[0].([]purchases.Purchase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPurchasesFromDate indicates an expected call of GetUserPurchasesFromDate.
func (mr *MockRepoMockRecorder) GetUserPurchasesFromDate(ctx, fromDate, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPurchasesFromDate", reflect.TypeOf((*MockRepo)(nil).GetUserPurchasesFromDate), ctx, fromDate, userID)
}

// MockChartDrawer is a mock of ChartDrawer interface.
type MockChartDrawer struct {
	ctrl     *gomock.Controller
	recorder *MockChartDrawerMockRecorder
}

// MockChartDrawerMockRecorder is the mock recorder for MockChartDrawer.
type MockChartDrawerMockRecorder struct {
	mock *MockChartDrawer
}

// NewMockChartDrawer creates a new mock instance.
func NewMockChartDrawer(ctrl *gomock.Controller) *MockChartDrawer {
	mock := &MockChartDrawer{ctrl: ctrl}
	mock.recorder = &MockChartDrawerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChartDrawer) EXPECT() *MockChartDrawerMockRecorder {
	return m.recorder
}

// PieChart mocks base method.
func (m *MockChartDrawer) PieChart(data []purchases.ReportItem) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PieChart", data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PieChart indicates an expected call of PieChart.
func (mr *MockChartDrawerMockRecorder) PieChart(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PieChart", reflect.TypeOf((*MockChartDrawer)(nil).PieChart), data)
}

// MockExchangeRateGetter is a mock of ExchangeRateGetter interface.
type MockExchangeRateGetter struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeRateGetterMockRecorder
}

// MockExchangeRateGetterMockRecorder is the mock recorder for MockExchangeRateGetter.
type MockExchangeRateGetterMockRecorder struct {
	mock *MockExchangeRateGetter
}

// NewMockExchangeRateGetter creates a new mock instance.
func NewMockExchangeRateGetter(ctrl *gomock.Controller) *MockExchangeRateGetter {
	mock := &MockExchangeRateGetter{ctrl: ctrl}
	mock.recorder = &MockExchangeRateGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeRateGetter) EXPECT() *MockExchangeRateGetterMockRecorder {
	return m.recorder
}

// GetExchangeRateToRUB mocks base method.
func (m *MockExchangeRateGetter) GetExchangeRateToRUB() purchases.RateToRUB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeRateToRUB")
	ret0, _ := ret[0].(purchases.RateToRUB)
	return ret0
}

// GetExchangeRateToRUB indicates an expected call of GetExchangeRateToRUB.
func (mr *MockExchangeRateGetterMockRecorder) GetExchangeRateToRUB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRateToRUB", reflect.TypeOf((*MockExchangeRateGetter)(nil).GetExchangeRateToRUB))
}

// GetExchangeRateToRUBFromDate mocks base method.
func (m_2 *MockExchangeRateGetter) GetExchangeRateToRUBFromDate(ctx context.Context, y, m, d int) (purchases.RateToRUB, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "GetExchangeRateToRUBFromDate", ctx, y, m, d)
	ret0, _ := ret[0].(purchases.RateToRUB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeRateToRUBFromDate indicates an expected call of GetExchangeRateToRUBFromDate.
func (mr *MockExchangeRateGetterMockRecorder) GetExchangeRateToRUBFromDate(ctx, y, m, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRateToRUBFromDate", reflect.TypeOf((*MockExchangeRateGetter)(nil).GetExchangeRateToRUBFromDate), ctx, y, m, d)
}
