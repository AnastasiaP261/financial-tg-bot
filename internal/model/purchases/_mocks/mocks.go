// Code generated by MockGen. DO NOT EDIT.
// Source: internal/model/purchases/model.go

// Package mock_purchases is a generated GoMock package.
package mock_purchases

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	purchases "gitlab.ozon.dev/apetrichuk/financial-tg-bot/internal/model/purchases"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// AddCategory mocks base method.
func (m *MockRepo) AddCategory(req purchases.CategoryRow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCategory", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCategory indicates an expected call of AddCategory.
func (mr *MockRepoMockRecorder) AddCategory(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCategory", reflect.TypeOf((*MockRepo)(nil).AddCategory), req)
}

// AddPurchase mocks base method.
func (m *MockRepo) AddPurchase(req purchases.AddPurchaseReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPurchase", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPurchase indicates an expected call of AddPurchase.
func (mr *MockRepoMockRecorder) AddPurchase(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPurchase", reflect.TypeOf((*MockRepo)(nil).AddPurchase), req)
}

// CategoryExist mocks base method.
func (m *MockRepo) CategoryExist(req purchases.CategoryRow) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CategoryExist", req)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CategoryExist indicates an expected call of CategoryExist.
func (mr *MockRepoMockRecorder) CategoryExist(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CategoryExist", reflect.TypeOf((*MockRepo)(nil).CategoryExist), req)
}

// GetReport mocks base method.
func (m *MockRepo) GetReport(fromDate time.Time, userID int64) ([]purchases.ReportItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReport", fromDate, userID)
	ret0, _ := ret[0].([]purchases.ReportItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReport indicates an expected call of GetReport.
func (mr *MockRepoMockRecorder) GetReport(fromDate, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReport", reflect.TypeOf((*MockRepo)(nil).GetReport), fromDate, userID)
}
